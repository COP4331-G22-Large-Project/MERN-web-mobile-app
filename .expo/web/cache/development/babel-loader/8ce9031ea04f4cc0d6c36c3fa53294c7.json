{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"/Users/brentvatne/code/react-native-appearance/src/index.tsx\";\nimport React, { useMemo } from 'react';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport { EventEmitter } from 'fbemitter';\nimport { useSubscription } from 'use-subscription';\nexport * from \"./Appearance.types\";\nimport { NativeAppearance, NativeAppearanceProvider } from \"./NativeAppearance\";\nvar eventEmitter = new EventEmitter();\nvar appearancePreferences = NativeAppearance.initialPreferences;\nvar nativeEventEmitter = new NativeEventEmitter(NativeAppearance);\nnativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {\n  Appearance.set(newAppearance);\n});\nexport var Appearance = function () {\n  function Appearance() {\n    _classCallCheck(this, Appearance);\n  }\n\n  _createClass(Appearance, null, [{\n    key: \"getColorScheme\",\n    value: function getColorScheme() {\n      return appearancePreferences.colorScheme;\n    }\n  }, {\n    key: \"set\",\n    value: function set(preferences) {\n      var colorScheme = preferences.colorScheme;\n\n      if (appearancePreferences.colorScheme !== colorScheme) {\n        appearancePreferences = {\n          colorScheme: colorScheme\n        };\n        eventEmitter.emit('change', preferences);\n      }\n    }\n  }, {\n    key: \"addChangeListener\",\n    value: function addChangeListener(listener) {\n      return eventEmitter.addListener('change', listener);\n    }\n  }]);\n\n  return Appearance;\n}();\nexport var AppearanceProvider = function AppearanceProvider(props) {\n  return React.createElement(NativeAppearanceProvider, _extends({\n    style: {\n      flex: 1\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    }\n  }));\n};\nexport function useColorScheme() {\n  var subscription = useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return Appearance.getColorScheme();\n      },\n      subscribe: function subscribe(callback) {\n        var eventSubscription = Appearance.addChangeListener(callback);\n        return function () {\n          return eventSubscription.remove();\n        };\n      }\n    };\n  }, []);\n  return useSubscription(subscription);\n}","map":{"version":3,"sources":["index.tsx"],"names":["eventEmitter","appearancePreferences","NativeAppearance","nativeEventEmitter","Appearance","colorScheme","preferences","AppearanceProvider","flex","subscription","useMemo","getCurrentValue","subscribe","eventSubscription","useSubscription"],"mappings":";;;;AAAA,OAAA,KAAA,IAAA,OAAA,QAAA,OAAA;;AAEA,SAAA,YAAA,QAAA,WAAA;AACA,SAAA,eAAA,QAAA,kBAAA;AAEA;AAGA,SAAA,gBAAA,EAAA,wBAAA;AAGA,IAAMA,YAAY,GAAG,IAArB,YAAqB,EAArB;AAGA,IAAIC,qBAA4C,GAAGC,gBAAgB,CAAnE,kBAAA;AAGA,IAAMC,kBAAkB,GAAG,IAAA,kBAAA,CAA3B,gBAA2B,CAA3B;AACAA,kBAAkB,CAAlBA,WAAAA,CAAAA,mBAAAA,EAAoD,UAAA,aAAA,EAA0C;AAC5FC,EAAAA,UAAU,CAAVA,GAAAA,CAAAA,aAAAA;AADFD,CAAAA;AAIA,OAAA,IAAaC,UAAb,GAAA,YAAA;AAAA,WAAA,UAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;AAAA;;AAAA,EAAA,YAAA,CAAA,UAAA,EAAA,IAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EAAA,SAAA,cAAA,GAa2C;AACvC,aAAOH,qBAAqB,CAA5B,WAAA;AAdJ;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,KAAA,EAAA,SAAA,GAAA,CAAA,WAAA,EAwBuD;AAAA,UAC7CI,WAD6C,GAC7BC,WAD6B,CAAA,WAAA;;AAInD,UAAIL,qBAAqB,CAArBA,WAAAA,KAAJ,WAAA,EAAuD;AACrDA,QAAAA,qBAAqB,GAAG;AAAEI,UAAAA,WAAW,EAArCJ;AAAwB,SAAxBA;AACAD,QAAAA,YAAY,CAAZA,IAAAA,CAAAA,QAAAA,EAAAA,WAAAA;AAEH;AAhCH;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,mBAAA;AAAA,IAAA,KAAA,EAAA,SAAA,iBAAA,CAAA,QAAA,EAqC4E;AACxE,aAAOA,YAAY,CAAZA,WAAAA,CAAAA,QAAAA,EAAP,QAAOA,CAAP;AAtCJ;AAAA,GAAA,CAAA,CAAA;;AAAA,SAAA,UAAA;AAAA,CAAA,EAAA;AA8CA,OAAO,IAAMO,kBAAkB,GAAlBA,SAAAA,kBAAAA,CAAqB,KAArBA,EAAqB;AAAA,SAChC,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA,QAAA,CAAA;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAvC;AAAiC;AAAjC,GAAA,EAAA,KAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EADgC;AAChC;AAAA,GAAA,CAAA,CADgC;AAA3B,CAAA;AAOP,OAAO,SAAA,cAAA,GAA2C;AAChD,MAAMC,YAAY,GAAGC,OAAO,CAC1B,YAAA;AAAA,WAAO;AACLC,MAAAA,eAAe,EAAE,SAAA,eAAA,GAAA;AAAA,eAAMP,UAAU,CAAhB,cAAMA,EAAN;AADZ,OAAA;AAELQ,MAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,QAAA,EAAkC;AAC3C,YAAIC,iBAAiB,GAAGT,UAAU,CAAVA,iBAAAA,CAAxB,QAAwBA,CAAxB;AACA,eAAO,YAAA;AAAA,iBAAMS,iBAAiB,CAAvB,MAAMA,EAAN;AAAP,SAAA;AAJJ;AAAO,KAAP;AAD0B,GAAA,EAA5B,EAA4B,CAA5B;AAWA,SAAOC,eAAe,CAAtB,YAAsB,CAAtB;AACD","sourcesContent":["import React, { useMemo } from 'react';\nimport { NativeEventEmitter } from 'react-native';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { useSubscription } from 'use-subscription';\nimport { AppearancePreferences, ColorSchemeName, AppearanceListener } from './Appearance.types';\nexport * from './Appearance.types';\n\n// Native modules\nimport { NativeAppearance, NativeAppearanceProvider } from './NativeAppearance';\n\n// Initialize the user-facing event emitter\nconst eventEmitter = new EventEmitter();\n\n// Initialize preferences synchronously\nlet appearancePreferences: AppearancePreferences = NativeAppearance.initialPreferences;\n\n// Initialize the native event emitter\nconst nativeEventEmitter = new NativeEventEmitter(NativeAppearance);\nnativeEventEmitter.addListener('appearanceChanged', (newAppearance: AppearancePreferences) => {\n  Appearance.set(newAppearance);\n});\n\nexport class Appearance {\n  /**\n   * Note: Although appearance is available immediately, it may change (e.g\n   * Dark Mode) so any rendering logic or styles that depend on this should try\n   * to call this function on every render, rather than caching the value (for\n   * example, using inline styles rather than setting a value in a\n   * `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.get('colorScheme');`\n   *\n   * @param {string} preference Name of preference (e.g. 'colorScheme').\n   * @returns {ColorSchemeName} Value for the preference.\n   */\n  static getColorScheme(): ColorSchemeName {\n    return appearancePreferences.colorScheme;\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * appearanceChanged event.\n   *\n   * @param {object} appearancePreferences Simple string-keyed object of\n   * appearance preferences to set.\n   */\n  static set(preferences: AppearancePreferences): void {\n    let { colorScheme } = preferences;\n\n    // Don't bother emitting if it's the same value\n    if (appearancePreferences.colorScheme !== colorScheme) {\n      appearancePreferences = { colorScheme };\n      eventEmitter.emit('change', preferences);\n    }\n  }\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  static addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  }\n}\n\n/**\n * Temporarily require a Provider since the upstream implementation uses root view customizations\n * to accomplish this same behavior\n */\nexport const AppearanceProvider = (props: { children: any }) => (\n  <NativeAppearanceProvider style={{ flex: 1 }} {...props} />\n);\n\n/**\n * Subscribe to color scheme updates\n */\nexport function useColorScheme(): ColorSchemeName {\n  const subscription = useMemo(\n    () => ({\n      getCurrentValue: () => Appearance.getColorScheme(),\n      subscribe: (callback: AppearanceListener) => {\n        let eventSubscription = Appearance.addChangeListener(callback);\n        return () => eventSubscription.remove();\n      },\n    }),\n    [],\n  );\n\n  return useSubscription<ColorSchemeName>(subscription);\n}\n"]},"metadata":{},"sourceType":"module"}