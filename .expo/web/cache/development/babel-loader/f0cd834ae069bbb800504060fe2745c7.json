{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/brentvatne/code/react-native-appearance/src/NativeAppearance.web.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport SyntheticPlatformEmitter from \"./web/SyntheticPlatformEmitter\";\n\nfunction getQuery() {\n  if (typeof window === 'undefined' || !window.matchMedia) return null;\n  return window.matchMedia('(prefers-color-scheme: dark)');\n}\n\nfunction isMediaQueryList(query) {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nexport var NativeAppearance = {\n  get name() {\n    return 'NativeAppearance';\n  },\n\n  get initialPreferences() {\n    var query = getQuery();\n\n    if (isMediaQueryList(query)) {\n      return {\n        colorScheme: query.matches ? 'dark' : 'light'\n      };\n    }\n\n    return {\n      colorScheme: 'no-preference'\n    };\n  }\n\n};\nexport function NativeAppearanceProvider(props) {\n  React.useEffect(function () {\n    var query = getQuery();\n\n    function listener(_ref) {\n      var matches = _ref.matches;\n      var colorScheme = matches ? 'dark' : 'light';\n      SyntheticPlatformEmitter.emit('appearanceChanged', {\n        colorScheme: colorScheme\n      });\n    }\n\n    if (query) query.addListener(listener);\n    return function () {\n      if (query) {\n        query.removeListener(listener);\n      }\n    };\n  }, []);\n  return React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    }\n  }));\n}\n;","map":{"version":3,"sources":["NativeAppearance.web.tsx"],"names":["window","query","NativeAppearance","getQuery","isMediaQueryList","colorScheme","React","matches","SyntheticPlatformEmitter","flex"],"mappings":";;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAKA,OAAA,wBAAA;;AAEA,SAAA,QAAA,GAA2C;AACzC,MAAI,OAAA,MAAA,KAAA,WAAA,IAAiC,CAACA,MAAM,CAA5C,UAAA,EAAyD,OAAA,IAAA;AACzD,SAAOA,MAAM,CAANA,UAAAA,CAAP,8BAAOA,CAAP;AAGF;;AAAA,SAAA,gBAAA,CAAA,KAAA,EAA+D;AAC7D,SAAOC,KAAK,IAAIA,KAAK,CAAdA,WAAAA,IAA8BA,KAAK,CAAnCA,cAAAA,IAAsD,OAAOA,KAAK,CAAZ,OAAA,KAA7D,SAAA;AAGF;;AAAA,OAAO,IAAMC,gBAAgB,GAAG;AAC9B,MAAA,IAAA,GAAmB;AACjB,WAAA,kBAAA;AAF4B,GAAA;;AAI9B,MAAA,kBAAA,GAAgD;AAC9C,QAAMD,KAAK,GAAGE,QAAd,EAAA;;AACA,QAAIC,gBAAgB,CAApB,KAAoB,CAApB,EAA6B;AAC3B,aAAO;AAAEC,QAAAA,WAAW,EAAEJ,KAAK,CAALA,OAAAA,GAAAA,MAAAA,GAAtB;AAAO,OAAP;AAEF;;AAAA,WAAO;AAAEI,MAAAA,WAAW,EAApB;AAAO,KAAP;AATG;;AAAyB,CAAzB;AAaP,OAAO,SAAA,wBAAA,CAAA,KAAA,EAA8C;AACnDC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAML,KAAK,GAAGE,QAAd,EAAA;;AAEA,aAAA,QAAA,CAAA,IAAA,EAAoD;AAAhCI,UAAAA,OAAgC,GAAA,IAAA,CAAhCA,OAAAA;AAClB,UAAMF,WAAW,GAAGE,OAAO,GAAA,MAAA,GAA3B,OAAA;AACAC,MAAAA,wBAAwB,CAAxBA,IAAAA,CAAAA,mBAAAA,EAAmD;AACjDH,QAAAA,WAAW,EADbG;AAAmD,OAAnDA;AAKF;;AAAA,QAAA,KAAA,EACEP,KAAK,CAALA,WAAAA,CAAAA,QAAAA;AAEF,WAAO,YAAM;AACX,UAAA,KAAA,EAAW;AACTA,QAAAA,KAAK,CAALA,cAAAA,CAAAA,QAAAA;AAEH;AAJD,KAAA;AAbFK,GAAAA,EAAAA,EAAAA;AAoBA,SAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAnB;AAAa;AAAb,GAAA,EAAA,KAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAP;AAAO;AAAA,GAAA,CAAA,CAAP;AACD;AAAA","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { AppearancePreferences } from './Appearance.types';\n// @ts-ignore\nimport SyntheticPlatformEmitter from './web/SyntheticPlatformEmitter';\n\nfunction getQuery(): MediaQueryList | null {\n  if (typeof window === 'undefined' || !window.matchMedia) return null;\n  return window.matchMedia('(prefers-color-scheme: dark)');\n}\n\nfunction isMediaQueryList(query: any): query is MediaQueryList {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nexport const NativeAppearance = {\n  get name(): string {\n    return 'NativeAppearance';\n  },\n  get initialPreferences(): AppearancePreferences {\n    const query = getQuery();\n    if (isMediaQueryList(query)) {\n      return { colorScheme: query.matches ? 'dark' : 'light' }\n    }\n    return { colorScheme: 'no-preference' };\n  },\n};\n\nexport function NativeAppearanceProvider(props: any) {\n  React.useEffect(() => {\n    const query = getQuery();\n\n    function listener({ matches }: MediaQueryListEvent) {\n      const colorScheme = matches ? 'dark' : 'light';\n      SyntheticPlatformEmitter.emit('appearanceChanged', {\n        colorScheme,\n      });\n    }\n\n    if (query)\n      query.addListener(listener);\n\n    return () => {\n      if (query) {\n        query.removeListener(listener)\n      }\n    }\n  }, []);\n\n  return <View style={{ flex: 1 }} {...props} />\n};\n"]},"metadata":{},"sourceType":"module"}