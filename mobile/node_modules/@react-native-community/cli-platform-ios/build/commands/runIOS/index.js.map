{"version":3,"sources":["../../../src/commands/runIOS/index.ts"],"names":["runIOS","_","ctx","args","fs","existsSync","projectPath","CLIError","process","chdir","xcodeProject","readdirSync","inferredSchemeName","path","basename","name","extname","scheme","logger","info","isWorkspace","chalk","bold","device","udid","runOnSimulator","error","devices","child_process","execFileSync","encoding","find","d","printFoundDevices","type","runOnDevice","physicalDevices","filter","matchingDevice","simulators","JSON","parse","fallbackSimulators","selectedSimulator","reduce","simulator","fallback","activeDeveloperDir","trim","booted","bootSimulator","appName","buildProject","appPath","getBuildPath","configuration","spawnSync","stdio","bundleID","join","result","status","success","stderr","selectedDevice","isIOSDeployInstalled","iosDeployInstallArgs","iosDeployOutput","message","Promise","resolve","reject","xcodebuildArgs","dim","xcpretty","verbose","xcprettyAvailable","spawn","stdout","buildProcess","getProcessOptions","buildOutput","errorOutput","on","data","stringData","toString","stdin","write","isVerbose","debug","code","end","getProductName","simulatorFullName","formattedDeviceName","_ignored","getTargetBuildDir","buildSettings","settings","i","wrapperExtension","WRAPPER_EXTENSION","TARGET_BUILD_DIR","isDevice","toLowerCase","includes","targetBuildDir","productNameMatch","exec","execSync","deviceName","firstIOSDevice","undefined","deviceByName","String","version","map","packager","terminal","port","env","RCT_TERMINAL","RCT_METRO_PORT","RCT_NO_LAUNCH_PACKAGER","description","func","examples","desc","cmd","options","default","val","Number","getDefaultUserTerminal"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport child_process, {\n  ChildProcess,\n  // @ts-ignore\n  SpawnOptionsWithoutStdio,\n} from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport {Config} from '@react-native-community/cli-types';\nimport findXcodeProject, {ProjectInfo} from './findXcodeProject';\nimport parseIOSDevicesList from './parseIOSDevicesList';\nimport findMatchingSimulator from './findMatchingSimulator';\nimport warnAboutManuallyLinkedLibs from '../../link/warnAboutManuallyLinkedLibs';\nimport warnAboutPodInstall from '../../link/warnAboutPodInstall';\nimport {\n  logger,\n  CLIError,\n  getDefaultUserTerminal,\n} from '@react-native-community/cli-tools';\nimport {Device} from '../../types';\n\ntype FlagsT = {\n  simulator?: string;\n  configuration: string;\n  scheme?: string;\n  projectPath: string;\n  device?: string | true;\n  udid?: string;\n  packager: boolean;\n  verbose: boolean;\n  port: number;\n  terminal: string | undefined;\n};\n\nfunction runIOS(_: Array<string>, ctx: Config, args: FlagsT) {\n  if (!fs.existsSync(args.projectPath)) {\n    throw new CLIError(\n      'iOS project folder not found. Are you sure this is a React Native project?',\n    );\n  }\n\n  warnAboutManuallyLinkedLibs(ctx);\n  warnAboutPodInstall(ctx);\n\n  process.chdir(args.projectPath);\n\n  const xcodeProject = findXcodeProject(fs.readdirSync('.'));\n  if (!xcodeProject) {\n    throw new CLIError(\n      `Could not find Xcode project files in \"${args.projectPath}\" folder`,\n    );\n  }\n\n  const inferredSchemeName = path.basename(\n    xcodeProject.name,\n    path.extname(xcodeProject.name),\n  );\n  const scheme = args.scheme || inferredSchemeName;\n\n  logger.info(\n    `Found Xcode ${\n      xcodeProject.isWorkspace ? 'workspace' : 'project'\n    } \"${chalk.bold(xcodeProject.name)}\"`,\n  );\n\n  // No need to load all available devices\n  if (!args.device && !args.udid) {\n    return runOnSimulator(xcodeProject, scheme, args);\n  }\n\n  if (args.device && args.udid) {\n    return logger.error(\n      'The `device` and `udid` options are mutually exclusive.',\n    );\n  }\n\n  const devices = parseIOSDevicesList(\n    child_process.execFileSync('xcrun', ['instruments', '-s'], {\n      encoding: 'utf8',\n    }),\n  );\n\n  if (args.udid) {\n    const device = devices.find(d => d.udid === args.udid);\n    if (!device) {\n      return logger.error(\n        `Could not find a device with udid: \"${chalk.bold(\n          args.udid,\n        )}\". ${printFoundDevices(devices)}`,\n      );\n    }\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    const physicalDevices = devices.filter(d => d.type !== 'simulator');\n    const device = matchingDevice(physicalDevices, args.device);\n    if (device) {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  }\n}\n\nasync function runOnSimulator(\n  xcodeProject: ProjectInfo,\n  scheme: string,\n  args: FlagsT,\n) {\n  let simulators: {devices: {[index: string]: Array<Device>}};\n  try {\n    simulators = JSON.parse(\n      child_process.execFileSync(\n        'xcrun',\n        ['simctl', 'list', '--json', 'devices'],\n        {encoding: 'utf8'},\n      ),\n    );\n  } catch (error) {\n    throw new CLIError(\n      'Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.',\n      error,\n    );\n  }\n\n  /**\n   * If provided simulator does not exist, try simulators in following order\n   * - iPhone X\n   * - iPhone 8\n   */\n  const fallbackSimulators = ['iPhone X', 'iPhone 8'];\n  const selectedSimulator = fallbackSimulators.reduce((simulator, fallback) => {\n    return (\n      simulator || findMatchingSimulator(simulators, {simulator: fallback})\n    );\n  }, findMatchingSimulator(simulators, args));\n\n  if (!selectedSimulator) {\n    throw new CLIError(\n      `No simulator available with ${\n        args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`\n      }`,\n    );\n  }\n\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n  const activeDeveloperDir = child_process\n    .execFileSync('xcode-select', ['-p'], {encoding: 'utf8'})\n    .trim();\n\n  child_process.execFileSync('open', [\n    `${activeDeveloperDir}/Applications/Simulator.app`,\n    '--args',\n    '-CurrentDeviceUDID',\n    selectedSimulator.udid,\n  ]);\n\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n\n  const appName = await buildProject(\n    xcodeProject,\n    selectedSimulator.udid,\n    scheme,\n    args,\n  );\n\n  const appPath = getBuildPath(\n    xcodeProject,\n    args.configuration,\n    appName,\n    false,\n    scheme,\n  );\n\n  logger.info(`Installing \"${chalk.bold(appPath)}\"`);\n\n  child_process.spawnSync(\n    'xcrun',\n    ['simctl', 'install', selectedSimulator.udid, appPath],\n    {stdio: 'inherit'},\n  );\n\n  const bundleID = child_process\n    .execFileSync(\n      '/usr/libexec/PlistBuddy',\n      ['-c', 'Print:CFBundleIdentifier', path.join(appPath, 'Info.plist')],\n      {encoding: 'utf8'},\n    )\n    .trim();\n\n  logger.info(`Launching \"${chalk.bold(bundleID)}\"`);\n\n  const result = child_process.spawnSync('xcrun', [\n    'simctl',\n    'launch',\n    selectedSimulator.udid,\n    bundleID,\n  ]);\n\n  if (result.status === 0) {\n    logger.success('Successfully launched the app on the simulator');\n  } else {\n    logger.error('Failed to launch the app on simulator', result.stderr);\n  }\n}\n\nasync function runOnDevice(\n  selectedDevice: Device,\n  scheme: string,\n  xcodeProject: ProjectInfo,\n  args: FlagsT,\n) {\n  const isIOSDeployInstalled = child_process.spawnSync(\n    'ios-deploy',\n    ['--version'],\n    {encoding: 'utf8'},\n  );\n\n  if (isIOSDeployInstalled.error) {\n    throw new CLIError(\n      `Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${chalk.bold(\n        'npm install -g ios-deploy',\n      )}\" and try again.`,\n    );\n  }\n\n  const appName = await buildProject(\n    xcodeProject,\n    selectedDevice.udid,\n    scheme,\n    args,\n  );\n\n  const iosDeployInstallArgs = [\n    '--bundle',\n    getBuildPath(xcodeProject, args.configuration, appName, true, scheme),\n    '--id',\n    selectedDevice.udid,\n    '--justlaunch',\n  ];\n\n  logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n\n  const iosDeployOutput = child_process.spawnSync(\n    'ios-deploy',\n    iosDeployInstallArgs,\n    {encoding: 'utf8'},\n  );\n\n  if (iosDeployOutput.error) {\n    throw new CLIError(\n      `Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${\n        iosDeployOutput.error.message\n      }`,\n    );\n  }\n\n  return logger.success('Installed the app on the device.');\n}\n\nfunction buildProject(\n  xcodeProject: ProjectInfo,\n  udid: string | undefined,\n  scheme: string,\n  args: FlagsT,\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const xcodebuildArgs = [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-configuration',\n      args.configuration,\n      '-scheme',\n      scheme,\n      '-destination',\n      `id=${udid}`,\n    ];\n    logger.info(\n      `Building ${chalk.dim(\n        `(using \"xcodebuild ${xcodebuildArgs.join(' ')}\")`,\n      )}`,\n    );\n    let xcpretty: ChildProcess | any;\n    if (!args.verbose) {\n      xcpretty =\n        xcprettyAvailable() &&\n        child_process.spawn('xcpretty', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n    }\n    const buildProcess = child_process.spawn(\n      'xcodebuild',\n      xcodebuildArgs,\n      getProcessOptions(args),\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n      if (xcpretty) {\n        xcpretty.stdin.write(data);\n      } else {\n        if (logger.isVerbose()) {\n          logger.debug(stringData);\n        } else {\n          process.stdout.write('.');\n        }\n      }\n    });\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      errorOutput += data;\n    });\n    buildProcess.on('close', (code: number) => {\n      if (xcpretty) {\n        xcpretty.stdin.end();\n      } else {\n        process.stdout.write('\\n');\n      }\n      if (code !== 0) {\n        reject(\n          new CLIError(\n            `\n            Failed to build iOS project.\n\n            We ran \"xcodebuild\" command but it exited with error code ${code}. To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${xcodeProject.name}.\n          `,\n            buildOutput + '\\n' + errorOutput,\n          ),\n        );\n        return;\n      }\n      resolve(getProductName(buildOutput) || scheme);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator: Device) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n  logger.info(`Launching ${simulatorFullName}`);\n  try {\n    child_process.spawnSync('xcrun', [\n      'instruments',\n      '-w',\n      selectedSimulator.udid,\n    ]);\n  } catch (_ignored) {\n    // instruments always fail with 255 because it expects more arguments,\n    // but we want it to only launch the simulator\n  }\n}\n\nfunction getTargetBuildDir(buildSettings: string) {\n  const settings = JSON.parse(buildSettings);\n\n  // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n    if (wrapperExtension === 'app') {\n      return settings[i].buildSettings.TARGET_BUILD_DIR;\n    }\n  }\n\n  return null;\n}\n\nfunction getBuildPath(\n  xcodeProject: ProjectInfo,\n  configuration: string,\n  appName: string,\n  isDevice: boolean,\n  scheme: string,\n) {\n  let device;\n\n  if (isDevice) {\n    device = 'iphoneos';\n  } else if (appName.toLowerCase().includes('tvos')) {\n    device = 'appletvsimulator';\n  } else {\n    device = 'iphonesimulator';\n  }\n\n  const buildSettings = child_process.execFileSync(\n    'xcodebuild',\n    [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-scheme',\n      scheme,\n      '-sdk',\n      device,\n      '-configuration',\n      configuration,\n      '-showBuildSettings',\n      '-json',\n    ],\n    {encoding: 'utf8'},\n  );\n  const targetBuildDir = getTargetBuildDir(buildSettings);\n  if (!targetBuildDir) {\n    throw new CLIError('Failed to get the target build directory.');\n  }\n\n  return `${targetBuildDir}/${appName}.app`;\n}\n\nfunction getProductName(buildOutput: string) {\n  const productNameMatch = /export FULL_PRODUCT_NAME=\"?(.+).app\"?$/m.exec(\n    buildOutput,\n  );\n  return productNameMatch ? productNameMatch[1] : null;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    child_process.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction matchingDevice(\n  devices: Array<Device>,\n  deviceName: string | true | undefined,\n) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find(d => d.type === 'device')!;\n    if (firstIOSDevice) {\n      logger.info(\n        `Using first available device named \"${chalk.bold(\n          firstIOSDevice.name,\n        )}\" due to lack of name supplied.`,\n      );\n      return firstIOSDevice;\n    } else {\n      logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  const deviceByName = devices.find(\n    device =>\n      device.name === deviceName || formattedDeviceName(device) === deviceName,\n  );\n  if (!deviceByName) {\n    logger.error(\n      `Could not find a device named: \"${chalk.bold(\n        String(deviceName),\n      )}\". ${printFoundDevices(devices)}`,\n    );\n  }\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator: Device) {\n  return simulator.version\n    ? `${simulator.name} (${simulator.version})`\n    : simulator.name;\n}\n\nfunction printFoundDevices(devices: Array<Device>) {\n  return [\n    'Available devices:',\n    ...devices.map(device => `  - ${device.name} (${device.udid})`),\n  ].join('\\n');\n}\n\nfunction getProcessOptions({\n  packager,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n    },\n  };\n}\n\nexport default {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [\n    {\n      desc: 'Run on a different simulator, e.g. iPhone 5',\n      cmd: 'react-native run-ios --simulator \"iPhone 5\"',\n    },\n    {\n      desc: 'Pass a non-standard location of iOS directory',\n      cmd: 'react-native run-ios --project-path \"./app/ios\"',\n    },\n    {\n      desc: \"Run on a connected device, e.g. Max's iPhone\",\n      cmd: 'react-native run-ios --device \"Max\\'s iPhone\"',\n    },\n    {\n      desc: 'Run on the AppleTV simulator',\n      cmd:\n        'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"',\n    },\n  ],\n  options: [\n    {\n      name: '--simulator [string]',\n      description:\n        'Explicitly set simulator to use. Optionally include iOS version between' +\n        'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n      default: 'iPhone 11',\n    },\n    {\n      name: '--configuration [string]',\n      description: 'Explicitly set the scheme configuration to use',\n      default: 'Debug',\n    },\n    {\n      name: '--scheme [string]',\n      description: 'Explicitly set Xcode scheme to use',\n    },\n    {\n      name: '--project-path [string]',\n      description:\n        'Path relative to project root where the Xcode project ' +\n        '(.xcodeproj) lives.',\n      default: 'ios',\n    },\n    {\n      name: '--device [string]',\n      description:\n        'Explicitly set device to use by name.  The value is not required if you have a single device connected.',\n    },\n    {\n      name: '--udid [string]',\n      description: 'Explicitly set device to use by udid',\n    },\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while building',\n    },\n    {\n      name: '--verbose',\n      description: 'Do not use xcpretty even if installed',\n    },\n    {\n      name: '--port [number]',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: (val: string) => Number(val),\n    },\n    {\n      name: '--terminal [string]',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal,\n    },\n  ],\n};\n"]}